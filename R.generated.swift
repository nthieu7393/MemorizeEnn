//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var home: home { .init(source: .init(bundle: bundle, tableName: "Home", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func home(preferredLanguages: [String]) -> home {
      .init(source: .init(bundle: bundle, tableName: "Home", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.home` struct is generated, and contains static references to 4 localization keys.
    struct home {
      let source: RswiftResources.StringResource.Source

      /// vi translation: Label
      ///
      /// Key: QTV-Dp-gmb.text
      ///
      /// Locales: vi
      var qtvDpGmbText: RswiftResources.StringResource { .init(key: "QTV-Dp-gmb.text", tableName: "Home", source: source, developmentValue: nil, comment: nil) }

      /// vi translation: Label
      ///
      /// Key: fB1-Ib-0y1.text
      ///
      /// Locales: vi
      var fB1Ib0y1Text: RswiftResources.StringResource { .init(key: "fB1-Ib-0y1.text", tableName: "Home", source: source, developmentValue: nil, comment: nil) }

      /// vi translation: Label
      ///
      /// Key: hpc-qE-9rK.text
      ///
      /// Locales: vi
      var hpcQE9rKText: RswiftResources.StringResource { .init(key: "hpc-qE-9rK.text", tableName: "Home", source: source, developmentValue: nil, comment: nil) }

      /// vi translation: Label
      ///
      /// Key: s8T-X2-nuV.text
      ///
      /// Locales: vi
      var s8TX2NuVText: RswiftResources.StringResource { .init(key: "s8T-X2-nuV.text", tableName: "Home", source: source, developmentValue: nil, comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: New set
      ///
      /// Key: create_new_set
      ///
      /// Locales: en, vi
      var create_new_set: RswiftResources.StringResource { .init(key: "create_new_set", tableName: "Localizable", source: source, developmentValue: "New set", comment: nil) }

      /// en translation: Definition
      ///
      /// Key: definition
      ///
      /// Locales: en, vi
      var definition: RswiftResources.StringResource { .init(key: "definition", tableName: "Localizable", source: source, developmentValue: "Definition", comment: nil) }

      /// en translation: Email
      ///
      /// Key: email
      ///
      /// Locales: en, vi
      var email: RswiftResources.StringResource { .init(key: "email", tableName: "Localizable", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: Example
      ///
      /// Key: example
      ///
      /// Locales: en, vi
      var example: RswiftResources.StringResource { .init(key: "example", tableName: "Localizable", source: source, developmentValue: "Example", comment: nil) }

      /// en translation: Favorite
      ///
      /// Key: favorite
      ///
      /// Locales: en, vi
      var favorite: RswiftResources.StringResource { .init(key: "favorite", tableName: "Localizable", source: source, developmentValue: "Favorite", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: logout
      ///
      /// Locales: en, vi
      var logout: RswiftResources.StringResource { .init(key: "logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Or
      ///
      /// Key: or
      ///
      /// Locales: en, vi
      var or: RswiftResources.StringResource { .init(key: "or", tableName: "Localizable", source: source, developmentValue: "Or", comment: nil) }

      /// en translation: Password
      ///
      /// Key: password
      ///
      /// Locales: en, vi
      var password: RswiftResources.StringResource { .init(key: "password", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Quickly Sign In With
      ///
      /// Key: quickly_signin_with
      ///
      /// Locales: en, vi
      var quickly_signin_with: RswiftResources.StringResource { .init(key: "quickly_signin_with", tableName: "Localizable", source: source, developmentValue: "Quickly Sign In With", comment: nil) }

      /// en translation: Review
      ///
      /// Key: review
      ///
      /// Locales: en, vi
      var review: RswiftResources.StringResource { .init(key: "review", tableName: "Localizable", source: source, developmentValue: "Review", comment: nil) }

      /// en translation: Set
      ///
      /// Key: set
      ///
      /// Locales: en, vi
      var set: RswiftResources.StringResource { .init(key: "set", tableName: "Localizable", source: source, developmentValue: "Set", comment: nil) }

      /// en translation: Sign In
      ///
      /// Key: signin
      ///
      /// Locales: en, vi
      var signin: RswiftResources.StringResource { .init(key: "signin", tableName: "Localizable", source: source, developmentValue: "Sign In", comment: nil) }

      /// en translation: You are using app without signing in. You data is at risk of being lost
      ///
      /// Key: signin_note
      ///
      /// Locales: en, vi
      var signin_note: RswiftResources.StringResource { .init(key: "signin_note", tableName: "Localizable", source: source, developmentValue: "You are using app without signing in. You data is at risk of being lost", comment: nil) }

      /// en translation: Sign In Success
      ///
      /// Key: signin_success
      ///
      /// Locales: en, vi
      var signin_success: RswiftResources.StringResource { .init(key: "signin_success", tableName: "Localizable", source: source, developmentValue: "Sign In Success", comment: nil) }

      /// en translation: Sign In With Email
      ///
      /// Key: signin_with_email
      ///
      /// Locales: en, vi
      var signin_with_email: RswiftResources.StringResource { .init(key: "signin_with_email", tableName: "Localizable", source: source, developmentValue: "Sign In With Email", comment: nil) }

      /// en translation: Sign Up
      ///
      /// Key: signup
      ///
      /// Locales: en, vi
      var signup: RswiftResources.StringResource { .init(key: "signup", tableName: "Localizable", source: source, developmentValue: "Sign Up", comment: nil) }

      /// en translation: Studying
      ///
      /// Key: studying
      ///
      /// Locales: en, vi
      var studying: RswiftResources.StringResource { .init(key: "studying", tableName: "Localizable", source: source, developmentValue: "Studying", comment: nil) }

      /// en translation: Term
      ///
      /// Key: term
      ///
      /// Locales: en, vi
      var term: RswiftResources.StringResource { .init(key: "term", tableName: "Localizable", source: source, developmentValue: "Term", comment: nil) }

      /// en translation: Trash
      ///
      /// Key: trash
      ///
      /// Locales: en, vi
      var trash: RswiftResources.StringResource { .init(key: "trash", tableName: "Localizable", source: source, developmentValue: "Trash", comment: nil) }

      /// en translation: Type set name
      ///
      /// Key: type_set_name
      ///
      /// Locales: en, vi
      var type_set_name: RswiftResources.StringResource { .init(key: "type_set_name", tableName: "Localizable", source: source, developmentValue: "Type set name", comment: nil) }

      /// en translation: Words
      ///
      /// Key: words
      ///
      /// Locales: en, vi
      var words: RswiftResources.StringResource { .init(key: "words", tableName: "Localizable", source: source, developmentValue: "Words", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `active`.
    var active: RswiftResources.ColorResource { .init(name: "active", path: [], bundle: bundle) }

    /// Color `cellBackground`.
    var cellBackground: RswiftResources.ColorResource { .init(name: "cellBackground", path: [], bundle: bundle) }

    /// Color `mainBackground`.
    var mainBackground: RswiftResources.ColorResource { .init(name: "mainBackground", path: [], bundle: bundle) }

    /// Color `mainText`.
    var mainText: RswiftResources.ColorResource { .init(name: "mainText", path: [], bundle: bundle) }

    /// Color `placeholder`.
    var placeholder: RswiftResources.ColorResource { .init(name: "placeholder", path: [], bundle: bundle) }

    /// Color `unFocused`.
    var unFocused: RswiftResources.ColorResource { .init(name: "unFocused", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 16 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `arrowDropDown`.
    var arrowDropDown: RswiftResources.ImageResource { .init(name: "arrowDropDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `avatar`.
    var avatar: RswiftResources.ImageResource { .init(name: "avatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backIcon`.
    var backIcon: RswiftResources.ImageResource { .init(name: "backIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bookIcon`.
    var bookIcon: RswiftResources.ImageResource { .init(name: "bookIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendarIcon`.
    var calendarIcon: RswiftResources.ImageResource { .init(name: "calendarIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `doneIcon`.
    var doneIcon: RswiftResources.ImageResource { .init(name: "doneIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logOutIcon`.
    var logOutIcon: RswiftResources.ImageResource { .init(name: "logOutIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `moreActionIcon`.
    var moreActionIcon: RswiftResources.ImageResource { .init(name: "moreActionIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `normal`.
    var normal: RswiftResources.ImageResource { .init(name: "normal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pressed`.
    var pressed: RswiftResources.ImageResource { .init(name: "pressed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `saveFillIcon`.
    var saveFillIcon: RswiftResources.ImageResource { .init(name: "saveFillIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchTextIcon`.
    var searchTextIcon: RswiftResources.ImageResource { .init(name: "searchTextIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setIcon`.
    var setIcon: RswiftResources.ImageResource { .init(name: "setIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sortIcon`.
    var sortIcon: RswiftResources.ImageResource { .init(name: "sortIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `starIcon`.
    var starIcon: RswiftResources.ImageResource { .init(name: "starIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trashFillIcon`.
    var trashFillIcon: RswiftResources.ImageResource { .init(name: "trashFillIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `HindSiliguri-Bold`.
    var hindSiliguriBold: RswiftResources.FontResource { .init(name: "HindSiliguri-Bold", bundle: bundle, filename: "HindSiliguri-Bold.ttf") }

    /// Font `HindSiliguri-Light`.
    var hindSiliguriLight: RswiftResources.FontResource { .init(name: "HindSiliguri-Light", bundle: bundle, filename: "HindSiliguri-Light.ttf") }

    /// Font `HindSiliguri-Medium`.
    var hindSiliguriMedium: RswiftResources.FontResource { .init(name: "HindSiliguri-Medium", bundle: bundle, filename: "HindSiliguri-Medium.ttf") }

    /// Font `HindSiliguri-Regular`.
    var hindSiliguriRegular: RswiftResources.FontResource { .init(name: "HindSiliguri-Regular", bundle: bundle, filename: "HindSiliguri-Regular.ttf") }

    /// Font `HindSiliguri-SemiBold`.
    var hindSiliguriSemiBold: RswiftResources.FontResource { .init(name: "HindSiliguri-SemiBold", bundle: bundle, filename: "HindSiliguri-SemiBold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [hindSiliguriBold, hindSiliguriLight, hindSiliguriMedium, hindSiliguriRegular, hindSiliguriSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 8 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HindSiliguri-Bold.ttf`.
    var hindSiliguriBoldTtf: RswiftResources.FileResource { .init(name: "HindSiliguri-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HindSiliguri-Light.ttf`.
    var hindSiliguriLightTtf: RswiftResources.FileResource { .init(name: "HindSiliguri-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HindSiliguri-Medium.ttf`.
    var hindSiliguriMediumTtf: RswiftResources.FileResource { .init(name: "HindSiliguri-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HindSiliguri-Regular.ttf`.
    var hindSiliguriRegularTtf: RswiftResources.FileResource { .init(name: "HindSiliguri-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `HindSiliguri-SemiBold.ttf`.
    var hindSiliguriSemiBoldTtf: RswiftResources.FileResource { .init(name: "HindSiliguri-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `oxford-5000.json`.
    var oxford5000Json: RswiftResources.FileResource { .init(name: "oxford-5000", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `phrasal-verbs.json`.
    var phrasalVerbsJson: RswiftResources.FileResource { .init(name: "phrasal-verbs", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `SetHeaderTableView`.
    var setHeaderTableView: RswiftResources.NibReference<SetHeaderTableView> { .init(name: "SetHeaderTableView", bundle: bundle) }

    /// Nib `SignInNoteView`.
    var signInNoteView: RswiftResources.NibReference<SignInNoteView> { .init(name: "SignInNoteView", bundle: bundle) }

    /// Nib `TextFieldToolbar`.
    var textFieldToolbar: RswiftResources.NibReference<TextFieldToolbar> { .init(name: "TextFieldToolbar", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "moreActionIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'moreActionIcon' is used in nib 'SetHeaderTableView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply.circle.fill' is used in nib 'SignInNoteView', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "doneIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'doneIcon' is used in nib 'TextFieldToolbar', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `HomeMenuTableViewCell`.
    let homeMenuTableViewCell: RswiftResources.ReuseIdentifier<HomeMenuTableViewCell> = .init(identifier: "HomeMenuTableViewCell")

    /// Reuse identifier `LogoutTableCell`.
    let logoutTableCell: RswiftResources.ReuseIdentifier<LogoutTableCell> = .init(identifier: "LogoutTableCell")

    /// Reuse identifier `SetTableViewCell`.
    let setTableViewCell: RswiftResources.ReuseIdentifier<SetTableViewCell> = .init(identifier: "SetTableViewCell")

    /// Reuse identifier `TermTableCell`.
    let termTableCell: RswiftResources.ReuseIdentifier<TermTableCell> = .init(identifier: "TermTableCell")

    /// Reuse identifier `TextMenuTableViewCell`.
    let textMenuTableViewCell: RswiftResources.ReuseIdentifier<TextMenuTableViewCell> = .init(identifier: "TextMenuTableViewCell")

    /// Reuse identifier `UserAvatarAndUserNameCell`.
    let userAvatarAndUserNameCell: RswiftResources.ReuseIdentifier<UserAvatarAndUserNameCell> = .init(identifier: "UserAvatarAndUserNameCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var home: home { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func home(bundle: Foundation.Bundle) -> home {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.home.validate()
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `Home`.
    struct home: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Home"

      var setsViewController: RswiftResources.StoryboardViewControllerIdentifier<SetsViewController> { .init(identifier: "SetsViewController", storyboard: name, bundle: bundle) }
      var signInViewController: RswiftResources.StoryboardViewControllerIdentifier<SignInViewController> { .init(identifier: "SignInViewController", storyboard: name, bundle: bundle) }
      var signUpViewController: RswiftResources.StoryboardViewControllerIdentifier<SignUpViewController> { .init(identifier: "SignUpViewController", storyboard: name, bundle: bundle) }
      var termsViewController: RswiftResources.StoryboardViewControllerIdentifier<TermsViewController> { .init(identifier: "TermsViewController", storyboard: name, bundle: bundle) }
      var textMenuViewController: RswiftResources.StoryboardViewControllerIdentifier<TextMenuViewController> { .init(identifier: "TextMenuViewController", storyboard: name, bundle: bundle) }
      var userInfoViewController: RswiftResources.StoryboardViewControllerIdentifier<UserInfoViewController> { .init(identifier: "UserInfoViewController", storyboard: name, bundle: bundle) }
      var viewController: RswiftResources.StoryboardViewControllerIdentifier<ViewController> { .init(identifier: "ViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye.fill' is used in storyboard 'Home', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "active", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'active' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainBackground' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainText", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainText' is used in storyboard 'Home', but couldn't be loaded.") }
        if setsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'setsViewController' could not be loaded from storyboard 'Home' as 'SetsViewController'.") }
        if signInViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Home' as 'SignInViewController'.") }
        if signUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Home' as 'SignUpViewController'.") }
        if termsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'Home' as 'TermsViewController'.") }
        if textMenuViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'textMenuViewController' could not be loaded from storyboard 'Home' as 'TextMenuViewController'.") }
        if userInfoViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userInfoViewController' could not be loaded from storyboard 'Home' as 'UserInfoViewController'.") }
        if viewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Home' as 'ViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var setsViewController: RswiftResources.StoryboardViewControllerIdentifier<SetsViewController> { .init(identifier: "SetsViewController", storyboard: name, bundle: bundle) }
      var signInViewController: RswiftResources.StoryboardViewControllerIdentifier<SignInViewController> { .init(identifier: "SignInViewController", storyboard: name, bundle: bundle) }
      var signUpViewController: RswiftResources.StoryboardViewControllerIdentifier<SignUpViewController> { .init(identifier: "SignUpViewController", storyboard: name, bundle: bundle) }
      var termsViewController: RswiftResources.StoryboardViewControllerIdentifier<TermsViewController> { .init(identifier: "TermsViewController", storyboard: name, bundle: bundle) }
      var textMenuViewController: RswiftResources.StoryboardViewControllerIdentifier<TextMenuViewController> { .init(identifier: "TextMenuViewController", storyboard: name, bundle: bundle) }
      var userInfoViewController: RswiftResources.StoryboardViewControllerIdentifier<UserInfoViewController> { .init(identifier: "UserInfoViewController", storyboard: name, bundle: bundle) }
      var viewController: RswiftResources.StoryboardViewControllerIdentifier<ViewController> { .init(identifier: "ViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "active", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'active' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainText", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainText' is used in storyboard 'Main', but couldn't be loaded.") }
        if setsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'setsViewController' could not be loaded from storyboard 'Main' as 'SetsViewController'.") }
        if signInViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Main' as 'SignInViewController'.") }
        if signUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Main' as 'SignUpViewController'.") }
        if termsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'Main' as 'TermsViewController'.") }
        if textMenuViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'textMenuViewController' could not be loaded from storyboard 'Main' as 'TextMenuViewController'.") }
        if userInfoViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userInfoViewController' could not be loaded from storyboard 'Main' as 'UserInfoViewController'.") }
        if viewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
    }
  }
}